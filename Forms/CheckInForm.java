package Forms;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author paps
 */
public class CheckInForm extends javax.swing.JFrame {

    /**
     * Creates new form CheckIn
     */
    public CheckInForm() {
        initComponents();
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                Reseption reseption = new Reseption();
                reseption.setVisible(true);
                LoginForm.centerFrame(reseption);
                dispose();
            }
        });
        this.setTitle("Check In");
        // this.setSize(300,300);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        checkInFromReservation = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        rSearchField = new javax.swing.JTextField();
        rNamesBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        rRoomField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        rDurationField = new javax.swing.JTextField();
        oldCustomerPanel = new javax.swing.JPanel();
        oldNamesBox = new javax.swing.JComboBox<>();
        oldSearchField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        oldRoomBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        oldDurationField = new javax.swing.JTextField();
        oldCheckInButton = new javax.swing.JButton();
        oldCancelButton = new javax.swing.JButton();

        oldSearchField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showOldCustomers();
            }
        });

        rNamesBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {

                    String roomID = getNumber();
                    String duration = getDuration();

                    rDurationField.setText(duration);
                    rRoomField.setText(roomID);
                }
            }
        });

        rSearchField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showReservations();
            }
        });

        showReservations();
        showOldCustomers();
        showRoomsForComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("check in");
        setAlwaysOnTop(true);

        // resevation buttons
        jButton3.setText("CheckIn");
        jButton3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                rCheckInbuttonActionPerformed(e);
            }

        });

        jButton4.setText("Cancel");
        jButton4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("ROOM :");

        rRoomField.setEditable(false);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("DURATION :");

        rDurationField.setEditable(false);

        javax.swing.GroupLayout checkInFromReservationLayout = new javax.swing.GroupLayout(checkInFromReservation);
        checkInFromReservation.setLayout(checkInFromReservationLayout);
        checkInFromReservationLayout.setHorizontalGroup(
                checkInFromReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(checkInFromReservationLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(checkInFromReservationLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(rSearchField)
                                        .addGroup(checkInFromReservationLayout.createSequentialGroup()
                                                .addComponent(jButton3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74,
                                                        Short.MAX_VALUE)
                                                .addComponent(jButton4))
                                        .addComponent(rNamesBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addGroup(checkInFromReservationLayout.createSequentialGroup()
                                                .addGroup(checkInFromReservationLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(checkInFromReservationLayout.createSequentialGroup()
                                                                .addComponent(jLabel1,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 63,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)))
                                                .addGroup(checkInFromReservationLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addComponent(rDurationField,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, 150,
                                                                Short.MAX_VALUE)
                                                        .addComponent(rRoomField))))
                                .addContainerGap()));
        checkInFromReservationLayout.setVerticalGroup(
                checkInFromReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, checkInFromReservationLayout
                                .createSequentialGroup()
                                .addContainerGap()
                                .addComponent(rSearchField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rNamesBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(checkInFromReservationLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(rRoomField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(checkInFromReservationLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(rDurationField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50,
                                        Short.MAX_VALUE)
                                .addGroup(checkInFromReservationLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton3)
                                        .addComponent(jButton4))
                                .addContainerGap()));

        jTabbedPane1.addTab("from reservation", checkInFromReservation);

        oldSearchField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ROOM :");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("DURATION :");

        oldCheckInButton.setText("Check In");
        oldCheckInButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                oldCheckInButtonActionPerformed(e);
            }
        });

        oldCancelButton.setText("Cancel");
        oldCancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });

        javax.swing.GroupLayout oldCustomerPanelLayout = new javax.swing.GroupLayout(oldCustomerPanel);
        oldCustomerPanel.setLayout(oldCustomerPanelLayout);
        oldCustomerPanelLayout.setHorizontalGroup(
                oldCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(oldCustomerPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(oldCustomerPanelLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(oldCustomerPanelLayout.createSequentialGroup()
                                                .addGroup(oldCustomerPanelLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(oldCustomerPanelLayout.createSequentialGroup()
                                                                .addGap(6, 6, 6)
                                                                .addComponent(oldCheckInButton)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(oldCustomerPanelLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(oldDurationField,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 109,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(oldCancelButton)))
                                        .addGroup(oldCustomerPanelLayout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(oldRoomBox, javax.swing.GroupLayout.PREFERRED_SIZE, 109,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(oldCustomerPanelLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(oldSearchField,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 207,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(oldNamesBox,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 207,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(18, Short.MAX_VALUE)));
        oldCustomerPanelLayout.setVerticalGroup(
                oldCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, oldCustomerPanelLayout
                                .createSequentialGroup()
                                .addContainerGap(26, Short.MAX_VALUE)
                                .addComponent(oldSearchField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oldNamesBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(oldCustomerPanelLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(oldRoomBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(oldCustomerPanelLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(oldDurationField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(oldCustomerPanelLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(oldCheckInButton)
                                        .addComponent(oldCancelButton))
                                .addGap(19, 19, 19)));

        jTabbedPane1.addTab("old customer", oldCustomerPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTabbedPane1));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTabbedPane1));

        pack();
    }// </editor-fold>

    // private String getRoomID() {
    //
    // }

    protected void oldCheckInButtonActionPerformed(ActionEvent e) {
        if (checkAvaibilityForDate()) {

            boolean roomUpdated = updateRoom();
            if (!roomUpdated) {
                JOptionPane.showMessageDialog(this, "Failed to update room.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String temp = (String) oldRoomBox.getSelectedItem();
            String selectedRoomNumber = temp.split(" ")[0];
            String customerID = getCustomerId();
            boolean customerUpdated = updateCustomer(customerID, selectedRoomNumber);
            if (!customerUpdated) {
                JOptionPane.showMessageDialog(this, "Failed to update customer.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (customerUpdated && roomUpdated) {
                JOptionPane.showMessageDialog(this, "Successfully checked in.", "Success",
                        JOptionPane.INFORMATION_MESSAGE);
                try {
                    Thread.sleep(500);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                String price = getPrice();
                JOptionPane.showMessageDialog(this, "price for the room : " + price, "price",
                        JOptionPane.INFORMATION_MESSAGE);
                dispose();

            }
        } else {
            JOptionPane.showMessageDialog(this, "Room is not available for this date.", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private String getPrice() {
        try (BufferedReader br = new BufferedReader(new FileReader("Data/Rooms.txt"))) {
            String line;
            String temp = (String) oldRoomBox.getSelectedItem();
            String selectedRoomNumber = temp.split(" ")[0];

            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length > 1) {
                    if (parts[0].equals(selectedRoomNumber)) {
                        return parts[2];
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private String getCustomerId() {
        String temp = (String) oldNamesBox.getSelectedItem();
        String customerID = temp.split(" ")[2];
        return customerID;
    }

    private boolean updateRoom() {
        String temp = (String) oldRoomBox.getSelectedItem();
        String selectedRoomNumber = temp.split(" ")[0];

        List<String> lines = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("Data/Rooms.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length > 1) {
                    if (parts[0].equals(selectedRoomNumber)) {
                        parts[3] = "1";
                        line = String.join(" ", parts);
                    }
                }
                lines.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (PrintWriter writer = new PrintWriter(new FileWriter("Data/Rooms.txt"))) {
            for (String line : lines) {
                writer.println(line);
            }
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    private boolean updateCustomer(String customerID, String newRoomID) {
        List<String> lines = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader("Data/Customers.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length > 3) {
                    if (parts[2].equals(customerID)) {
                        parts[3] = newRoomID; // Change the room ID
                        parts[4] = LocalDate.now().toString();
                        parts[5] = "0";
                        line = String.join(" ", parts); // Update the line with the new room ID
                    }
                }
                lines.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (PrintWriter writer = new PrintWriter(new FileWriter("Data/Customers.txt"))) {
            for (String line : lines) {
                writer.println(line);
            }
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    private boolean CheckReservationInName() {
        try (BufferedReader br = new BufferedReader(new FileReader("Data/Reservations.txt"))) {
            String line;
            String temp = (String) rNamesBox.getSelectedItem();
            String customerID = temp.split(" ")[2];
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length > 2) {
                    if (parts[2].equals(customerID)) {
                        return true;
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    private void rCheckInbuttonActionPerformed(ActionEvent e) {
        if (CheckReservationInName()) {
            boolean roomUpdated = updateRoom();
            if (!roomUpdated) {
                JOptionPane.showMessageDialog(this, "Failed to update room.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String temp = (String) rNamesBox.getSelectedItem();
            String customerID = temp.split(" ")[2];
            String roomID = rRoomField.getText();
            boolean customerUpdated = updateCustomer(customerID, roomID);
            if (!customerUpdated) {
                JOptionPane.showMessageDialog(this, "Failed to update customer.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (customerUpdated && roomUpdated) {
                JOptionPane.showMessageDialog(this, "Successfully checked in.", "Success",
                        JOptionPane.INFORMATION_MESSAGE);
                try {
                    Thread.sleep(500);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                String price = getPrice();
                JOptionPane.showMessageDialog(this, "price for the room : " + price, "price",
                        JOptionPane.INFORMATION_MESSAGE);
                removeReservation(customerID);
                dispose();

            }
        } else {
            JOptionPane.showMessageDialog(this, "?", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // customerId is the same as the customerID in the reservations.txt file
    public static void removeReservation(String customerID) {
        List<String> lines = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader("Data/Reservations.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length > 1 && !parts[2].equals(customerID)) {
                    lines.add(line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (PrintWriter writer = new PrintWriter(new FileWriter("Data/Reservations.txt"))) {
            for (String line : lines) {
                writer.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // private

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckInForm.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckInForm.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckInForm.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckInForm.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CheckInForm checkInForm = new CheckInForm();
                checkInForm.setVisible(true);
                LoginForm.centerFrame(checkInForm);

            }
        });
    }

    private void showReservations() {
        rNamesBox.removeAllItems(); // Clear the items in the rNamesBox

        try (BufferedReader br = new BufferedReader(new FileReader("Data/Reservations.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                // from Reservations.txt
                String[] parts = line.split(" ");

                if (parts.length > 1) {
                    if (rSearchField.getText().isEmpty() || parts[0].equals(rSearchField.getText())) {
                        rNamesBox.addItem(parts[0] + " " + parts[1] + " " + parts[2]);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // data is the roomID
    // private String[] getDates(String roomID) {
    // try (BufferedReader br = new BufferedReader(new
    // FileReader("Data/Reservations.txt"))) {
    // String line;
    // while ((line = br.readLine()) != null) {
    // String[] parts = line.split(" ");
    // if (parts.length > 2) {
    // if (parts[3].equals(roomID)) {
    // String dates[] = new String[2];
    // dates[0] = parts[4];
    // dates[1] = parts[5];
    // }
    // }
    // }
    // } catch (IOException e) {
    // e.printStackTrace();
    // }

    // return new String[] { "", "" };
    // }

    private String getDuration() {

        try (BufferedReader br = new BufferedReader(new FileReader("Data/Reservations.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length > 1) {
                    String name = parts[0];
                    String surname = parts[1];
                    String id = parts[2];
                    if (rNamesBox.getSelectedItem().equals(name + " " + surname + " " + id)) {
                        return parts[4];
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    // returns the room number
    private String getNumber() {
        try (BufferedReader br = new BufferedReader(new FileReader("Data/Reservations.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length > 1) {
                    if (rNamesBox.getSelectedItem().equals(parts[0] + " " + parts[1] + " " + parts[2])) {
                        return parts[3];
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    // private void showOldCustomers() {
    // try (BufferedReader br = new BufferedReader(new
    // FileReader("Data/Customers.txt"))) {
    // String line;
    // while ((line = br.readLine()) != null) {
    // String[] parts = line.split(" ");
    // if (parts.length > 1) {
    // if (oldSearchField.getText().isEmpty() ||
    // parts[0].equals(oldSearchField.getText())) {
    // oldNamesBox.addItem(parts[0] + " " + parts[1] + " " + parts[2]);
    // }
    // }
    // }
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // }

    private void showOldCustomers() {
        String searchText = oldSearchField.getText();
        oldNamesBox.removeAllItems();
        try (BufferedReader br = new BufferedReader(new FileReader("Data/Customers.txt"))) {
            // Read all reservations into a HashSet
            HashSet<String> reservedCustomers = new HashSet<>();
            try (BufferedReader br2 = new BufferedReader(new FileReader("Data/Reservations.txt"))) {
                String line2;
                while ((line2 = br2.readLine()) != null) {
                    String[] parts2 = line2.split(" ");
                    if (parts2.length > 2) {
                        reservedCustomers.add(parts2[2]); // Assuming parts2[2] is the customer ID
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length > 2 && parts.length > 3 && parts[3].equals("0")) {
                    if (line.contains(searchText) && !reservedCustomers.contains(parts[2])) { // Check if customer is in
                                                                                              // the HashSet
                        oldNamesBox.addItem(parts[0] + " " + parts[1] + " " + parts[2]);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void showRoomsForComboBox() {
        try (BufferedReader br = new BufferedReader(new FileReader("Data/Rooms.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length > 1) {
                    String roomNumber = parts[0];
                    String roomType = parts[1];
                    String roomStatus = parts[3];

                    if (roomStatus.equals("0")) {
                        oldRoomBox.addItem(roomNumber + " " + roomType);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private boolean checkAvaibilityForDate() {
        String temp = (String) oldRoomBox.getSelectedItem();
        String roomNumber = temp.split(" ")[0];
        LocalDate now = LocalDate.now();

        try (BufferedReader br = new BufferedReader(new FileReader("Data/Reservations.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length > 2) {
                    if (parts[3].equals(roomNumber)) {
                        LocalDate startDate = LocalDate.parse(parts[5]);
                        LocalDate endDate = LocalDate.parse(parts[6]);
                        if ((now.isEqual(startDate) || now.isAfter(startDate))
                                && (now.isEqual(endDate) || now.isBefore(endDate))) {
                            return false;
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return true;
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel checkInFromReservation;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton oldCancelButton;
    private javax.swing.JButton oldCheckInButton;
    private javax.swing.JPanel oldCustomerPanel;
    private javax.swing.JTextField oldDurationField;
    private javax.swing.JComboBox<String> oldNamesBox;
    private javax.swing.JComboBox<String> oldRoomBox;
    private javax.swing.JTextField oldSearchField;
    private javax.swing.JTextField rDurationField;
    private javax.swing.JComboBox<String> rNamesBox;
    private javax.swing.JTextField rRoomField;
    private javax.swing.JTextField rSearchField;
    // End of variables declaration
}
